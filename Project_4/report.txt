Harris Doan
UCLA ID: 605317270

a.) 
I ran into a lot of obstacles. My biggest difficuly has finding a way to
take in account the number of floating point numbers. For our case, an integer could count as one and a certain type of string could as well. If the 
element did not have a leading + or - then it was valid. So instead of trying to make it a lot harder on myself, I just recalled what we did in Project 3.
Using that logic, I decided to create two bool functions similar to how we did isValidQC, but instead validInteger and validFloat. Since an integer was 
a valid parameter to count towards, I knew instinctually that if I were to iterate across the length of the string adding anything that is a digit
into a new temporary string. That if the size of the temporary string is the same size as the array string, then it was a valid integer. Since integers
only comprise of digits, a string such as "1233" should return a size of 4 and when iterating across the length and pulling the digits into a temporary string
that temp_string.size() would also return 4. Since anything that wasn't a digit would be omitted the difference in sizes would easily give away that it wasn't
a proper integer. I did this same thinking with the float except this time I added the restriction that the size had to be 1 different. An easy way to figure out
if a string is a valid float is to do the same as the integer except compare the size of the temporary string and the array.size() - 1. The reason I subtract 1
is because what is the only difference between a float and an integer? There is only a single decimal in it. If there were multiple decimals, the size of
the temp string would not equal the array.size() - 1. This meaning it was not a valid float. Then in my counting function, I just added the addition constraint that 
as long as the string did not contain a + or - anywhere in it, it was valid. This however, was my second approach. My original solution simply used
strtol and strtod from the string library. One allowing me a string to long int conversion using a string input, pointer, and base 10. This made it much easier.
If I was converting the string to an integer. If the pointer was at the end of the string, then the entire string was successfully converted to a integer.
If the string was "123" the pointer would point at the end signifying that the entirety of the string was comprised of valid digits that formed an integer.
If a string such as "123asd" were to come up, the pointer would not point to the end meaning this was not a valid integer. This was the same premise for 
strtod for the float values. However, since I wasn't sure or not that using a pointer and strtol, and strtod was a valid solution, I came up with both solutions
just in case.

b.) This time I won't right out the long long terminal page of test cases. I'll simply list them.

    string data[5] = {"mamaBbcca", "mamaBbcca", "12", "98.76", "tyrion"};
    string test[3] = {"aaa", "bbb", "cCc"};
    string folks[8] = {"samwell", "jon", "margaery", "daenerys", "tyrion", "sansa", "magdalena", "jon"};
    string a[6] = {"123", "456", "789", "gamma", "beta", "delta"};
    string c[0] = {};
    cout.setf(ios::boolalpha);
    
    Test Cases:
    cout << locateMaximum(test, 3) << endl;                 Test for the correct output of "cCc" 
    cout << hasNoCapitals(test, 3) << endl;                 Initially is was "ccc", but I added a capital C to see whether or not it would detect it. It returned false.
    cout << hasNoCapitals(folks, 8) << endl;                Tested an actual string array from our spec. It returned the corrected true;
    cout << countFloatingPointValues(data, 5) << endl;      Used this to test my original method to produce 2. It returned 2.
    cout << locateMaximum(a, 3) << endl;                    First test of my locatedMaximum where n was smaller than the size of the array. Returned "789". Perfect.
    cout << locateMaximum(c, 0) << endl;                    Test for an empty string
    cout << countFloatingPointValues(data, 5) << endl;      Tested this with method 2 using a string search instead of strtol and strtod. Returned 2 as well.
    cout << countFloatingPointValues(data, 0) << endl;      Tested to make sure it would return -1 if n <= 0
    cout << shiftLeft(data, 5, 3, "foo") << endl;           Tested my array shift using the test from the spec. Easy to know its working right if it matches the spec.
    cout << shiftLeft(data, 5, 10, "foo");                  Test from the spec where amount is larger than n. The whole array becomes the placeholder.
    cout << shiftLeft(data, 5, 0, "foo") << endl;           Test where amount = 0. Therefore, returning -1.
    cout << shiftLeft(data, 5, 1, "PERFECT") << endl;       My personal test whether things would mess up if n was 1. It worked fine.
    cout << countFloatingPointValues(a, 6) << endl;         Test on the entire array a[6]. It returned the proper value.
    cout << validFloat("12.12") << endl;                    Test to make sure my float was returning the right boolean. Returned true;
    cout << validFloat("12.12.12") << endl;                 Test to make sure it would return false on an invalid float. Returned false;
    cout << validInteger("18") << endl;                     Test to make sure my integer was returning the right boolean. Returned true;
    cout << validInteger("asd123") << endl;                 Test to make sure it would return false. It did!

    A lot of the test were repeated due to me coming up with two solutions for the countingFloatingPointValues. So I was testing to make sure the results matched up.
    If they matched up then everything I implemened thus far was working perfectly. Mine happened to work flawlessly.


